function AdminCreateOrderCycleCtrl($scope, $http, OrderCycle, Enterprise) {
  $scope.order_cycle = OrderCycle.order_cycle;

  $scope.enterprises = {};
  Enterprise.index(function(data) {
    for(i in data) {
      $scope.enterprises[data[i]['id']] = data[i];
    }
  });

  $scope.addSupplier = function($event) {
    OrderCycle.addSupplier($event, $scope.new_supplier_id);
  };

  $scope.submit = function() {
    OrderCycle.create();
  };
}


function AdminEditOrderCycleCtrl($scope, $http, OrderCycle, Enterprise) {
  $scope.enterprises = {};
  Enterprise.index(function(data) {
    for(i in data) {
      $scope.enterprises[data[i]['id']] = data[i];
    }
  });

  var order_cycle_id = window.location.pathname.match(/\/admin\/order_cycles\/(\d+)/)[1];
  $scope.order_cycle = OrderCycle.load(order_cycle_id);

  $scope.addSupplier = function($event) {
    OrderCycle.addSupplier($event, $scope.new_supplier_id);
  };

  $scope.submit = function() {
    OrderCycle.update();
  };
}


angular.module('order_cycle', ['ngResource']).
  config(function($httpProvider) {
    $httpProvider.defaults.headers.common['X-CSRF-Token'] = $('meta[name=csrf-token]').attr('content');
  }).
  factory('OrderCycle', function($http, $resource) {
    var OrderCycle = $resource('/admin/order_cycles/:order_cycle_id.json', {},
			       {'index': { method: 'GET', isArray: true},
				'show': { method: 'GET', isArray: false}});


    return {
      order_cycle: {incoming_exchanges: [],
		    outgoing_exchanges: []},

      addSupplier: function($event, new_supplier_id) {
	$event.preventDefault();
	this.order_cycle.incoming_exchanges.push({enterprise_id: new_supplier_id, active: true});
      },

      removeInactiveExchanges: function() {
	for(var i=0; i < this.order_cycle.incoming_exchanges.length; i++) {
	  if(!this.order_cycle.incoming_exchanges[i].active) {
	    this.order_cycle.incoming_exchanges.splice(i, 1);
	    i--;
	  }
	}
      },

      load: function(order_cycle_id) {
	var service = this;

	OrderCycle.get({order_cycle_id: order_cycle_id}, function(oc) {
	  $.extend(service.order_cycle, oc);
	  service.order_cycle.incoming_exchanges = [];
	  service.order_cycle.outgoing_exchanges = [];
	  for(i in service.order_cycle.exchanges) {
	    var exchange = service.order_cycle.exchanges[i];
	    if(exchange.sender_id == service.order_cycle.coordinator_id) {
	      service.order_cycle.outgoing_exchanges.push({enterprise_id: exchange.receiver_id, active: true});

	    } else if(exchange.receiver_id == service.order_cycle.coordinator_id) {
	      service.order_cycle.incoming_exchanges.push({enterprise_id: exchange.sender_id, active: true});

	    } else {
	      console.log('Exchange between two enterprises, neither of which is coordinator!');
	    }
	  }

	  delete(service.order_cycle.exchanges);
	});

	return this.order_cycle;
      },

      create: function() {
	this.removeInactiveExchanges();

	$http.post('/admin/order_cycles', {order_cycle: this.order_cycle}).success(function(data) {
	  if(data['success']) {
	    window.location = '/admin/order_cycles';
	  } else {
	    console.log('fail');
	  }
	});
      },

      update: function() {
	this.removeInactiveExchanges();

	var path = '/admin/order_cycles/' + this.order_cycle.id
	$http.put(path, {order_cycle: this.order_cycle}).success(function(data) {
	  if(data['success']) {
	    window.location = '/admin/order_cycles';
	  } else {
	    console.log('fail');
	  }
	});
      }
    };
  }).
  factory('Enterprise', function($resource) {
    return $resource('/admin/enterprises/:enterprise_id.json', {},
		     {'index': { method: 'GET', isArray: true}});
  }).
  directive('datetimepicker', ['$parse', function($parse) {
    return function(scope, element, attrs) {
      // using $parse instead of scope[attrs.datetimepicker] for cases
      // where attrs.datetimepicker is 'foo.bar.lol'
      $(element).datetimepicker({
	dateFormat: 'yy-mm-dd',
	timeFormat: 'HH:mm:ss',
	showOn: "button",
	buttonImage: "<%= asset_path 'datepicker/cal.gif' %>",
	buttonImageOnly: true,
	stepMinute: 15,
	onSelect: function(dateText, inst) {
	  scope.$apply(function() {
	    parsed = $parse(attrs.datetimepicker);
	    parsed.assign(scope, dateText);
	  });
	}
      });
    };
  }]);
